namespace io::k8s::authentication {
  entity groups;

  entity serviceaccounts = {
    "name": __cedar::String,
    "namespace": __cedar::String
  };

  entity uids;

  entity userextras = {
    "key": __cedar::String,
    "value": __cedar::String
  };

  entity users;
}

namespace k8s {
  entity Namespace = {
    "metadata": meta::v1::ObjectMeta,
    "name": __cedar::String
  };

  entity Node = {
    "groups": Set<__cedar::String>,
    "name": __cedar::String,
    "uid": __cedar::String,
    "username": __cedar::String
  } tags Set<__cedar::String>;

  entity NonResourceURL = {
    "path": __cedar::String
  };

  entity Resource in [k8s::Namespace] = {
    "apiGroup": __cedar::String,
    "apiVersion": __cedar::String,
    "name": __cedar::String,
    "namespace"?: k8s::Namespace,
    "resourceCombined": __cedar::String
  };

  entity ServiceAccount in [k8s::Namespace] = {
    "groups": Set<__cedar::String>,
    "name": __cedar::String,
    "namespace": k8s::Namespace,
    "uid": __cedar::String,
    "username": __cedar::String
  } tags Set<__cedar::String>;

  entity User = {
    "groups": Set<__cedar::String>,
    "uid": __cedar::String,
    "username": __cedar::String
  } tags Set<__cedar::String>;

  action "any" appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource, k8s::NonResourceURL],
    context: {}
  };

  action "approve" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "attest" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "bind" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "connect" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "create" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "delete" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource, k8s::NonResourceURL],
    context: {}
  };

  action "deletecollection" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "escalate" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "get" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource, k8s::NonResourceURL],
    context: {}
  };

  action "head" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::NonResourceURL],
    context: {}
  };

  action "impersonate" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [io::k8s::authentication::users, io::k8s::authentication::serviceaccounts, io::k8s::authentication::groups, io::k8s::authentication::uids, io::k8s::authentication::userextras],
    context: {}
  };

  action "list" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "options" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::NonResourceURL],
    context: {}
  };

  action "patch" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource, k8s::NonResourceURL],
    context: {}
  };

  action "post" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::NonResourceURL],
    context: {}
  };

  action "put" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::NonResourceURL],
    context: {}
  };

  action "sign" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "update" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "use" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };

  action "watch" in [k8s::Action::"any"] appliesTo {
    principal: [k8s::User, k8s::ServiceAccount, k8s::Node],
    resource: [k8s::Resource],
    context: {}
  };
}

namespace meta::v1 {
  type KeyValue = {
    "key": __cedar::String,
    "value": __cedar::String
  };

  type ObjectMeta = {
    "annotations": Set<meta::v1::KeyValue>,
    "creationTimestamp": __cedar::String,
    "deletionTimestamp"?: __cedar::String,
    "finalizers": Set<__cedar::String>,
    "generateName"?: __cedar::String,
    "labels": Set<meta::v1::KeyValue>,
    "resourceVersion": __cedar::String,
    "uid": __cedar::String
  };
}

